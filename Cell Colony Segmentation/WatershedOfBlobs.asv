function [ img_seg ] = WatershedOfBlobs(bw, img)

%% Parameters extraction
% 'PixelIdxList' = Linear indices of the pixels in the region, returned as 
% a p-element vector
% 'Image' = Image the same size as the bounding box of the region, returned 
% as a binary (logical) array. The on pixels correspond to the region, 
% and all other pixels are off
% 'BoundingBox' = Smallest rectangle containing the region, returned as a 
% 1-by-Q*2 vector, where Q is the number of image dimensions. For example,
% in the vector [ul_corner width], ul_corner specifies the upper-left 
% corner of the bounding box in the form [x y z ...]. width specifies 
% the width of the bounding box along each dimension in the form 
% [x_width y_width ...]. regionprops uses ndims to get the dimensions 
% of label matrix or binary image, ndims(L), and numel to get the 
% dimensions of connected components, numel(CC.ImageSize)
stats = regionprops(bw, img, 'Area', 'Image', 'PixelIdxList', 'BoundingBox')

% Select only the BLOBs with sufficient area for watershed segmentation
mediancellsize = median([stats.Area]);
BLOBind = find([stats.Area] > 0.7*mediancellsize);  % BLOB indices
borderbuffer = 10;                                  % in pixels
WS_temp = false(size(img));
img_seg = logical(bw);

%% Watershed on each individual section of the mask
for i = 1:length(bigBind)
    
    % Extract each BLOB by cropping (with a buffer 'safety' border) the 
    % bounding box of each BLOB
    r = round(feats(bigBind(i)).BoundingBox);
    bb = [max(r(1)-borderbuffer,1) max(r(2)-borderbuffer,1) ...
        r(3)+2*borderbuffer-1 r(4)+2*borderbuffer-1];
    % Crop (with buffer border) the segment which contains the selected BLOB
    img_temp = imcrop(img, bb);
    %im_tmp = im_norm(im_tmp, [1 99], 'minmax', norm_info, 0);
    % Crop the 
    bwBLOB_temp = false(size(bw));
    bwBLOB_temp(feats(bigBind(i)).PixelIdxList) = 1;
    bwBLOB_temp = imcrop(bwBLOB_temp, bb);
    % Seed points mask cropping
    parameters.seedmask = imcrop(parameters.spmask, bb);
    
    % Watershed segmentation
%     L = aiwatershed(im_tmp, imb, parameters);
%     
%     if max(max(bwlabel(L))) > 0 && sum(sum(L)) >= 0.6 * sum(sum(imb))
%         [f1, f2] = find(L>0);
%         fr = f1 + bb(2) - 1;
%         fc = f2 + bb(1) - 1;
%         WS_tmp(sub2ind(size(img), fr, fc)) = L(sub2ind(size(L), f1, f2));
%         img_seg(feats(bigBind(k)).PixelIdxList) = 0;
%     end
    
end

% img_seg = imfill(logical(img_seg)|WS_tmp, 'holes');

end