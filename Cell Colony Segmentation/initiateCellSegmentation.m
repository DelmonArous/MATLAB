function [eigvec_matrix] = initiateCellSegmentation(varargin)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% varargin{1} = sourcepath
% varargin{2} = dishpath
% varargin{3} = resultpath
% varargin{4} = param
% varargin{5} = f
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if varargin{4}.rgb == 1
    
    folderList = getAllFolders(varargin{1});
    %folderList_dish = getAllFolders(sourcepath_img_dish{i});
    
    for i = 1:length(folderList)
        
        [path1, foldername1, ~] = fileparts(folderList{i});
        [~, foldername2, ~]     = fileparts(path1);
        destpath = fullfile(varargin{3}, foldername2);
        if ~exist(destpath, 'dir')
            mkdir(destpath)
        end
        destpath = fullfile(destpath, foldername1);
        if ~exist(destpath, 'dir')
            mkdir(destpath)
        end
        
        fileList = getAllFiles(folderList{i});
        %fileList_dish = getAllFiles(folderList_dish{j});
        
        filename_vec = {};
        confluency_vec = [];
        n_colony = [];
        eigvec_matrix = zeros(3);
        mean_area   = []; SD_area   = [];
        mean_red    = []; SD_red    = [];
        mean_green  = []; SD_green  = [];
        mean_blue   = []; SD_blue   = [];
        mean_gray   = []; SD_gray   = [];
        mean_pca1   = []; SD_pca1   = [];
        mean_pca2   = []; SD_pca2   = [];
                
        for j = 1:length(fileList) % 2!!!!
            
            [~, filename, ~] = fileparts(fileList{j});
            filename
            
            t = tic;   
            [confluency, areastats, redstats, greenstats, bluestats, ...
                graystats, pca1stats, pca2stats, ~, eigvec] = ...
                CellSegmentation(fileList{j}, varargin{2}, destpath, ...
                varargin{4}, varargin{5}); % fileList_dish{k}
            runtime = toc(t);
                        
            if ~isempty(areastats)
                
                colony_id               = (1:numel(areastats))';
                colony_xyCentroids      = vertcat(areastats.Centroid);
                colony_xCentroids       = colony_xyCentroids(:,1);
                colony_yCentroids       = colony_xyCentroids(:,2);
                colony_areas            = [areastats.Area]' .* ...
                    varargin{4}.px_size^2;
                colony_circularity      = [areastats.Circularity]';
                colony_eccentricity     = [areastats.Eccentricity]';
                confluency_vec(j)       = confluency * 100;
                eigvec_matrix           = eigvec_matrix + eigvec;
                
            else
                
                colony_id               = 0;
                colony_xCentroids       = 0;
                colony_yCentroids       = 0;
                colony_areas            = 0;
                colony_circularity      = 0;
                colony_eccentricity     = 0;
                confluency_vec(j)       = 0;
                eigvec_matrix           = eigvec_matrix + zeros(3);
                
            end
            
            colony_MeanRed      = [redstats.MeanIntensity]';
            colony_MeanGreen    = [greenstats.MeanIntensity]';
            colony_MeanBlue     = [bluestats.MeanIntensity]';
            colony_MeanGray     = [graystats.MeanIntensity]';
            colony_MeanPCA1     = [pca1stats.MeanIntensity]';
            colony_MeanPCA2     = [pca2stats.MeanIntensity]';
            colony_SDRed        = [redstats.SD]';
            colony_SDGreen      = [greenstats.SD]';
            colony_SDBlue       = [bluestats.SD]';
            colony_SDGray       = [graystats.SD]';
            colony_SDPCA1       = [pca1stats.SD]';
            colony_SDPCA2       = [pca2stats.SD]';
            
            filename_vec{j}         = filename;
            n_colony(j)             = numel(areastats);
            mean_area(j)            = mean(colony_areas);
            mean_circularity(j)     = mean(colony_circularity);
            mean_eccentricity(j)    = mean(colony_eccentricity);
            mean_red(j)             = mean(colony_MeanRed);
            mean_green(j)           = mean(colony_MeanGreen);
            mean_blue(j)            = mean(colony_MeanBlue);
            mean_gray(j)            = mean(colony_MeanGray);
            mean_pca1(j)            = mean(colony_MeanPCA1);
            mean_pca2(j)            = mean(colony_MeanPCA2);
            SD_area(j)              = std(colony_areas);
            SD_circularity(j)       = std(colony_circularity);
            SD_eccentricity(j)      = std(colony_eccentricity);
            SD_red(j)               = mean(colony_SDRed);
            SD_green(j)             = mean(colony_SDGreen);
            SD_blue(j)              = mean(colony_SDBlue);
            SD_gray(j)              = mean(colony_SDGray);
            SD_pca1(j)              = mean(colony_SDPCA1);
            SD_pca2(j)              = mean(colony_SDPCA2);
            
            % pixelindexlist{k} = cat(1,areastats_colony.PixelIdxList);
            
            % Write results to .csv file
            varNames = {'Colony ID',            ...
                'Colony Area (mm2)',            ...
                'Centroid x-Coordinate (px)',   ...
                'Centroid y-Coordinate (px)',   ...
                'Circularity (a.u)',            ...
                'Eccentricity (a.u)',           ...
                'Mean Colony Red (a.u)',        ...
                'Mean Colony Green (a.u)',      ...
                'Mean Colony Blue (a.u)',       ...
                'Mean Colony Gray (a.u)',       ...
                'Mean Colony PCA1 (a.u)',       ...
                'Mean Colony PCA2 (a.u)',       ...
                'SD Colony Red (a.u)',          ...
                'SD Colony Green (a.u)',        ...
                'SD Colony Blue (a.u)',         ...
                'SD Colony Gray (a.u)',         ...
                'SD Colony PCA1 (a.u)',         ...
                'SD Colony PCA2 (a.u)'};
            T = table(colony_id,        ...
                colony_areas,           ...
                colony_xCentroids,      ...
                colony_yCentroids,      ...
                colony_circularity,     ...
                colony_eccentricity,    ...
                colony_MeanRed,         ...
                colony_MeanGreen,       ...
                colony_MeanBlue,        ...
                colony_MeanGray,        ...
                colony_MeanPCA1,        ...
                colony_MeanPCA2,        ...
                colony_SDRed,           ...
                colony_SDGreen,         ...
                colony_SDBlue,          ...
                colony_SDGray,          ...
                colony_SDPCA1,          ...
                colony_SDPCA2,          ...
                'VariableNames', varNames);
            writetable(T, fullfile(destpath, ...
                sprintf('%s-ColonyData.xlsx', filename)))
            
            close all
            
        end
        
        eigvec_matrix = (1/length(fileList)) .* eigvec_matrix;
        
        varNames  = {'Filename',        ...
            'Colony count',             ...
            'Mean area (mm2)',      	...
            'SD area (mm2)',            ...
            'Confluency (%)',           ...
            'Mean circularity (a.u)',   ...
            'SD circularity (a.u)',     ...
            'Mean eccentricity (a.u)',  ...
            'SD eccentricity (a.u)',    ...
            'Mean Red (a.u)',           ...
            'SD Red (a.u)',             ...
            'Mean Green (a.u)',         ...
            'SD Green (a.u)',           ...
            'Mean Blue (a.u)',          ...
            'SD Blue (a.u)',            ...
            'Mean Gray (a.u)',          ...
            'SD Gray (a.u)',            ...
            'Mean PCA1 (a.u)',          ...
            'SD PCA1 (a.u)',            ...
            'Mean PCA2 (a.u)',          ...
            'SD PCA2 (a.u)'};
        T = table(filename_vec',    ...
            n_colony',              ...
            mean_area',             ...
            SD_area',               ...
            confluency_vec',        ...
            mean_circularity',      ...
            SD_circularity',        ...
            mean_eccentricity',     ...
            SD_eccentricity',       ...
            mean_red',              ...
            SD_red',                ...
            mean_green',            ...
            SD_green',              ...
            mean_blue',             ...
            SD_blue',               ...
            mean_gray',             ...
            SD_gray',               ...
            mean_pca1',             ...
            SD_pca1',               ...
            mean_pca2',             ...
            SD_pca2',               ...
            'VariableNames', varNames);
        writetable(T, fullfile(destpath, [foldername2 '.xlsx']))
        
        close all
        
    end
    
else
    
    folderList = getAllFolders(varargin{1});
    %         folderList_dish = getAllFolders(sourcepath_img_dish{i});
    
    for i = 1:length(folderList)
        [path1, foldername1, ~] = fileparts(folderList{i});
        [path2, foldername2, ~] = fileparts(path1);
        destpath = fullfile(varargin{3}, foldername2);
        if ~exist(destpath, 'dir')
            mkdir(destpath)
        end
        destpath = fullfile(destpath, foldername1);
        if ~exist(destpath, 'dir')
            mkdir(destpath)
        end
        
        fileList = getAllFiles(folderList{i});
        %             fileList_dish = getAllFiles(folderList_dish{j});
        
        filename_vec = {};
        confluency_vec = [];
        n_colony = [];
        mean_area       = []; SD_area       = [];
        mean_intensity  = []; SD_intensity  = [];
        mean_pca1       = []; SD_pca1       = [];
        
        for j = 1:length(fileList)
            
            [~, filename, ~] = fileparts(fileList{j});
            filename
            
            t = tic;
            [confluency, areastats, imgstats, pca1stats, eigvec] = ...
                CellSegmentation_test(fileList{j}, varargin{2}, ...
                destpath, varargin{4}, varargin{5});
            runtime = toc(t);
            
            if ~isempty(areastats)
                
                colony_xyCentroids = vertcat(areastats.Centroid);
                colony_xCentroids = colony_xyCentroids(:,1);
                colony_yCentroids = colony_xyCentroids(:,2);
                colony_areas = [areastats.Area]' .* varargin{4}.px_size^2;
                confluency_vec(j) = confluency * 100;
                
            else
                
                colony_xCentroids = 0;
                colony_yCentroids = 0;
                colony_areas = 0;
                confluency_vec(j) = 0;
                
            end
            
            colony_MedianIntensity  = [imgstats.MedianIntensity]';
            colony_MedianPCA1       = [pca1stats.MedianIntensity]';
            colony_SDIntensity      = [imgstats.SD]';
            colony_SDPCA1           = [pca1stats.SD]';
            
            filename_vec{j}     = filename;
            n_colony(j)         = numel(areastats);
            mean_area(j)        = mean(colony_areas);
            mean_intensity(j)   = mean(colony_MedianIntensity);
            mean_pca1(j)        = mean(colony_MedianPCA1);
            SD_area(j)          = mean(colony_areas);
            SD_intensity(j)     = mean(colony_SDIntensity);
            SD_pca1(j)          = mean(colony_SDPCA1);
            
            % pixelindexlist{k} = cat(1,areastats_colony.PixelIdxList);
            
            % Write results to .csv file
            varNames = {'Colony Area (mm2)',        ...
                'Centroid x-Coordinate (px)',       ...
                'Centroid y-Coordinate (px)',       ...
                'Median Colony Intensity (a.u)',    ...
                'Median Colony PCA1 (a.u)',         ...
                'SD Colony Intensity (a.u)',        ...
                'SD Colony PCA1 (a.u)'};
            T = table(colony_areas, ...
                colony_xCentroids,  ...
                colony_yCentroids,  ...
                colony_MedianIntensity, ...
                colony_MedianPCA1,  ...
                colony_SDIntensity,     ...
                colony_SDPCA1,      ...
                'VariableNames', varNames);
            writetable(T, fullfile(destpath, ...
                sprintf('%s-ColonyData.csv', filename)),  ...
                'Delimiter', ',', 'QuoteStrings', true)
            
            close all
            
        end
        
        varNames  = {'Filename',    ...
            'Colony count',         ...
            'Mean size (mm2)',      ...
            'SD size (mm2)',        ...
            'Confluency (%)',       ...
            'Mean Intensity (a.u)', ...
            'SD Intensity (a.u)',   ...
            'Mean PCA1 (a.u)',      ...
            'SD PCA1 (a.u)'};
        T = table(filename_vec',    ...
            n_colony',              ...
            mean_area',             ...
            SD_area',               ...
            confluency_vec',        ...
            mean_intensity',        ...
            SD_image',              ...
            mean_pca1',             ...
            SD_pca1',               ...
            'VariableNames', varNames);
        writetable(T, fullfile(destpath, [foldername2 '.csv']),  ...
            'Delimiter', ',', 'QuoteStrings', true)
        
    end
    
end

end